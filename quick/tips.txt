////////////////////////////////////////////////////////
/// SIMPLE RUN

./waf --run="main --run_dir='../runs/example_single'"
NS_LOG="SomeClass=all" ./waf --run="main --run_dir='../runs/example_single'"

////////////////////////////////////////////////////////
/// DEBUG EVENT QUEUE

If you want to debug the event queue, add:

Simulator::GetImplementation()->GetObject<DefaultSimulatorImpl>()->PrintInfoEventQueue();

void
DefaultSimulatorImpl::PrintInfoEventQueue (void) {
    m_events->GetObject<MapScheduler>()->DoSomething();
}

void
MapScheduler::DoSomething (void) const
{
  std::cout << "Amount of events in there: " << m_list.size() << std::endl;
}

////////////////////////////////////////////////////////
/// MEMORY CHECK USING VALGRIND

# Heap usage analysis
rm -rf ../runs/example_big_grid_one_flow/logs_ns3
mkdir ../runs/example_big_grid_one_flow/logs_ns3
./waf --command-template="valgrind --time-unit=ms --max-snapshots=500 --tool=massif %s --run_dir='../runs/flows_example_single_many_small_flows'" --run "main_flows" 2>&1 | tee ../runs/flows_example_single_many_small_flows/logs_ns3/console.txt
massif-visualizer [massif file]

# Memory leak check
rm -rf ../runs/example_single/logs_ns3
mkdir ../runs/example_single/logs_ns3
./waf --command-template="valgrind %s --run_dir='../runs/flows_example_single'" --run "main_flows" 2>&1 | tee ../runs/flows_example_single/logs_ns3/console.txt

////////////////////////////////////////////////////////
/// SAVE NS-3 OUTPUT

# To show all NS-3 logs:
NS_LOG="*=*|all" ./waf --run="main --run_dir='../runs/example_single'" &> a.txt

////////////////////////////////////////////////////////
/// TRACK NETWORK DEVICE QUEUE SIZE

#include <fstream>

std::ofstream ofs;
ofs.open ("queue.txt");
ofs.close();

container.Get(0)->GetObject<PointToPointNetDevice>()->GetQueue()->TraceConnectWithoutContext(
        "PacketsInQueue", MakeCallback(&QueueChangeA));

static void
QueueChangeA (uint32_t oldNumPackets, uint32_t newNumPackets) {
    std::ofstream ofs;
    ofs.open("queue.txt", std::ofstream::out | std::ofstream::app);
    ofs << Simulator::Now().GetSeconds() << "\t" << newNumPackets << std::endl;
    ofs.close();
}

////////////////////////////////////////////////////////
/// PLOT FROM FLOW

cd quick/flow_plot
python flow_plot.py ./ ../../runs/flows_example_single/logs_ns3 0
